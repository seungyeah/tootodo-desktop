// This file is @generated by prost-build.
/// MsgModel 정의
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgModel {
    /// BSON ObjectId를 문자열로 처리
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// 열거형 MsgType
    #[prost(enumeration = "MsgType", tag = "2")]
    pub msg_type: i32,
    #[prost(string, tag = "3")]
    pub content: ::prost::alloc::string::String,
    #[prost(bool, tag = "4")]
    pub booked: bool,
    /// 열거형 ChatType
    #[prost(enumeration = "ChatType", tag = "5")]
    pub chat_type: i32,
    /// 중첩 MsgModel
    #[prost(message, repeated, tag = "6")]
    pub chat_msgs: ::prost::alloc::vec::Vec<MsgModel>,
    /// DateTime 처리
    #[prost(message, optional, tag = "7")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
}
/// 열거형 정의: ChatType
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ChatType {
    Ask = 0,
    Event = 1,
    Task = 2,
}
impl ChatType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ChatType::Ask => "ASK",
            ChatType::Event => "EVENT",
            ChatType::Task => "TASK",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ASK" => Some(Self::Ask),
            "EVENT" => Some(Self::Event),
            "TASK" => Some(Self::Task),
            _ => None,
        }
    }
}
/// 열거형 정의: MsgType
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MsgType {
    Text = 0,
    Question = 1,
    Answer = 2,
    Image = 3,
    File = 4,
    Link = 5,
    Video = 6,
    Audio = 7,
    Location = 8,
}
impl MsgType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            MsgType::Text => "TEXT",
            MsgType::Question => "QUESTION",
            MsgType::Answer => "ANSWER",
            MsgType::Image => "IMAGE",
            MsgType::File => "FILE",
            MsgType::Link => "LINK",
            MsgType::Video => "VIDEO",
            MsgType::Audio => "AUDIO",
            MsgType::Location => "LOCATION",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TEXT" => Some(Self::Text),
            "QUESTION" => Some(Self::Question),
            "ANSWER" => Some(Self::Answer),
            "IMAGE" => Some(Self::Image),
            "FILE" => Some(Self::File),
            "LINK" => Some(Self::Link),
            "VIDEO" => Some(Self::Video),
            "AUDIO" => Some(Self::Audio),
            "LOCATION" => Some(Self::Location),
            _ => None,
        }
    }
}
