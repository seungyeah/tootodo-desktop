// This file is @generated by prost-build.
/// Protobuf 메시지 정의
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NoteModel {
    /// ID 필드: BSON ObjectId를 문자열로 처리
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// User UUID: 문자열로 처리 (UUID는 Protobuf에서 직접 지원하지 않음)
    #[prost(string, tag = "2")]
    pub user: ::prost::alloc::string::String,
    /// Title 필드
    #[prost(string, tag = "3")]
    pub title: ::prost::alloc::string::String,
    /// Category 관련 필드
    ///
    /// BSON ObjectId를 문자열로 처리
    #[prost(string, tag = "4")]
    pub category_id: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub category_color: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub category_name: ::prost::alloc::string::String,
    /// PropValueModel 리스트
    #[prost(message, repeated, tag = "7")]
    pub prop_values: ::prost::alloc::vec::Vec<PropValueModel>,
    /// PageModel 리스트
    #[prost(message, repeated, tag = "8")]
    pub pages: ::prost::alloc::vec::Vec<PageModel>,
    /// 연결된 Task ID: BSON ObjectId를 문자열로 처리
    #[prost(string, tag = "9")]
    pub connected_task: ::prost::alloc::string::String,
    /// Parent ID: BSON ObjectId를 문자열로 처리
    #[prost(string, tag = "10")]
    pub parent_id: ::prost::alloc::string::String,
    /// Chat 관련 필드
    #[prost(enumeration = "super::chat::ChatType", tag = "11")]
    pub chat_type: i32,
    #[prost(message, repeated, tag = "12")]
    pub chat_msgs: ::prost::alloc::vec::Vec<super::chat::MsgModel>,
    /// 생성일 및 수정일: Google의 Timestamp 타입 사용
    #[prost(message, optional, tag = "13")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "14")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
}
/// PageModel 정의
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PageModel {
    /// BSON ObjectId를 문자열로 처리
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// UUID를 문자열로 처리
    #[prost(string, tag = "2")]
    pub user: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub title: ::prost::alloc::string::String,
    /// BSON ObjectId를 문자열로 처리
    #[prost(string, tag = "4")]
    pub connected_note: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "5")]
    pub contents: ::prost::alloc::vec::Vec<BlockModel>,
    /// DateTime 처리
    #[prost(message, optional, tag = "6")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "7")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
}
/// BlockModel 정의
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlockModel {
    /// BSON ObjectId를 문자열로 처리
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// BSON ObjectId를 문자열로 처리
    #[prost(string, tag = "2")]
    pub src_task_id: ::prost::alloc::string::String,
    /// 열거형 BlockType
    #[prost(enumeration = "BlockType", tag = "3")]
    pub block_type: i32,
    #[prost(string, tag = "4")]
    pub body: ::prost::alloc::string::String,
}
/// PropValueModel 정의
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PropValueModel {
    /// BSON ObjectId를 문자열로 처리
    #[prost(string, tag = "1")]
    pub prop_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub prop_name: ::prost::alloc::string::String,
    /// 열거형 PropertyType
    #[prost(enumeration = "PropertyType", tag = "3")]
    pub prop_type: i32,
    /// 중첩 타입 PropValueType
    #[prost(message, optional, tag = "4")]
    pub values: ::core::option::Option<PropValueType>,
}
/// PropValueType 정의
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PropValueType {
    #[prost(oneof = "prop_value_type::ValueType", tags = "1, 2")]
    pub value_type: ::core::option::Option<prop_value_type::ValueType>,
}
/// Nested message and enum types in `PropValueType`.
pub mod prop_value_type {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ValueType {
        /// Multiple 값
        #[prost(string, tag = "1")]
        Multiple(::prost::alloc::string::String),
        /// Single 값
        #[prost(string, tag = "2")]
        Single(::prost::alloc::string::String),
    }
}
/// 열거형 정의: PropertyType
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PropertyType {
    MultiSelect = 0,
    SingleSelect = 1,
    Text = 2,
    Number = 3,
    DateTime = 4,
    File = 5,
    Image = 6,
    Link = 7,
    Email = 8,
    Phone = 9,
    Location = 10,
}
impl PropertyType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            PropertyType::MultiSelect => "MULTI_SELECT",
            PropertyType::SingleSelect => "SINGLE_SELECT",
            PropertyType::Text => "TEXT",
            PropertyType::Number => "NUMBER",
            PropertyType::DateTime => "DATE_TIME",
            PropertyType::File => "FILE",
            PropertyType::Image => "IMAGE",
            PropertyType::Link => "LINK",
            PropertyType::Email => "EMAIL",
            PropertyType::Phone => "PHONE",
            PropertyType::Location => "LOCATION",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MULTI_SELECT" => Some(Self::MultiSelect),
            "SINGLE_SELECT" => Some(Self::SingleSelect),
            "TEXT" => Some(Self::Text),
            "NUMBER" => Some(Self::Number),
            "DATE_TIME" => Some(Self::DateTime),
            "FILE" => Some(Self::File),
            "IMAGE" => Some(Self::Image),
            "LINK" => Some(Self::Link),
            "EMAIL" => Some(Self::Email),
            "PHONE" => Some(Self::Phone),
            "LOCATION" => Some(Self::Location),
            _ => None,
        }
    }
}
/// 열거형 정의: BlockType
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BlockType {
    Editor = 0,
    Code = 1,
    Drawing = 2,
    Table = 3,
}
impl BlockType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            BlockType::Editor => "EDITOR",
            BlockType::Code => "CODE",
            BlockType::Drawing => "DRAWING",
            BlockType::Table => "TABLE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EDITOR" => Some(Self::Editor),
            "CODE" => Some(Self::Code),
            "DRAWING" => Some(Self::Drawing),
            "TABLE" => Some(Self::Table),
            _ => None,
        }
    }
}
