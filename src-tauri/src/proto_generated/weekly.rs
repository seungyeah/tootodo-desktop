// This file is @generated by prost-build.
#[derive(serde::Serialize, serde::Deserialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WeeklyModel {
    #[prost(uint32, tag = "1")]
    pub year: u32,
    #[prost(uint32, tag = "2")]
    pub week: u32,
    #[prost(message, repeated, tag = "3")]
    pub tasks: ::prost::alloc::vec::Vec<TaskWithSchedule>,
    #[prost(message, repeated, tag = "4")]
    pub habits: ::prost::alloc::vec::Vec<OngoingHabit>,
    #[prost(message, repeated, tag = "5")]
    pub records: ::prost::alloc::vec::Vec<DailyRecord>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskWithSchedule {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub critical_path_color: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "4")]
    pub subtasks: ::prost::alloc::vec::Vec<super::task::SubtaskModel>,
    #[prost(bool, tag = "5")]
    pub pinned: bool,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OngoingHabit {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub icon: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub color: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub goal: ::core::option::Option<super::habit::Goal>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DailyRecord {
    #[prost(enumeration = "Week", tag = "1")]
    pub weekday: i32,
    #[prost(string, tag = "2")]
    pub summary: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub msgs: ::prost::alloc::vec::Vec<DailyMsg>,
    #[prost(message, repeated, tag = "4")]
    pub timer_records: ::prost::alloc::vec::Vec<TimerRecord>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DailyMsg {
    #[prost(enumeration = "DailyMsgType", tag = "1")]
    pub msg_type: i32,
    #[prost(string, tag = "2")]
    pub related_task: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub related_habit: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub content: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TimerRecord {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub cycles: ::prost::alloc::vec::Vec<TimerCycle>,
    #[prost(message, optional, tag = "3")]
    pub total_focus_time: ::core::option::Option<::prost_wkt_types::Duration>,
    #[prost(message, optional, tag = "4")]
    pub total_time: ::core::option::Option<::prost_wkt_types::Duration>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TimerCycle {
    #[prost(message, optional, tag = "1")]
    pub start_at: ::core::option::Option<::prost_wkt_types::Timestamp>,
    #[prost(message, optional, tag = "2")]
    pub end_at: ::core::option::Option<::prost_wkt_types::Timestamp>,
    #[prost(uint32, tag = "3")]
    pub focus_rate: u32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DailyMsgType {
    Text = 0,
    Question = 1,
    Timer = 2,
    Summary = 3,
}
impl DailyMsgType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            DailyMsgType::Text => "TEXT",
            DailyMsgType::Question => "QUESTION",
            DailyMsgType::Timer => "TIMER",
            DailyMsgType::Summary => "SUMMARY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TEXT" => Some(Self::Text),
            "QUESTION" => Some(Self::Question),
            "TIMER" => Some(Self::Timer),
            "SUMMARY" => Some(Self::Summary),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Week {
    Unknown = 0,
    Mon = 1,
    Tue = 2,
    Wed = 3,
    Thu = 4,
    Fri = 5,
    Sat = 6,
    Sun = 7,
}
impl Week {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Week::Unknown => "UNKNOWN",
            Week::Mon => "MON",
            Week::Tue => "TUE",
            Week::Wed => "WED",
            Week::Thu => "THU",
            Week::Fri => "FRI",
            Week::Sat => "SAT",
            Week::Sun => "SUN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN" => Some(Self::Unknown),
            "MON" => Some(Self::Mon),
            "TUE" => Some(Self::Tue),
            "WED" => Some(Self::Wed),
            "THU" => Some(Self::Thu),
            "FRI" => Some(Self::Fri),
            "SAT" => Some(Self::Sat),
            "SUN" => Some(Self::Sun),
            _ => None,
        }
    }
}
