// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: habit.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ChatModel } from "./chat";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "habit";

export enum HabitStatus {
  ONGOING = 0,
  COMPLETED = 1,
  PENDING = 2,
  UNRECOGNIZED = -1,
}

export interface HabitModel {
  id: string;
  name: string;
  icon: string;
  color: string;
  status: HabitStatus;
  records: HabitRecord[];
  goal: Goal | undefined;
  chat: ChatModel | undefined;
  relatedNotes: string[];
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

export interface HabitRecord {
  date: string;
  startAt: Date | undefined;
  msg: string;
}

export interface Goal {
  daysPerWeek: number;
  startAt: number;
}

function createBaseHabitModel(): HabitModel {
  return {
    id: "",
    name: "",
    icon: "",
    color: "",
    status: 0,
    records: [],
    goal: undefined,
    chat: undefined,
    relatedNotes: [],
    createdAt: undefined,
    updatedAt: undefined,
  };
}

export const HabitModel: MessageFns<HabitModel> = {
  encode(message: HabitModel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.icon !== "") {
      writer.uint32(26).string(message.icon);
    }
    if (message.color !== "") {
      writer.uint32(34).string(message.color);
    }
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    for (const v of message.records) {
      HabitRecord.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.goal !== undefined) {
      Goal.encode(message.goal, writer.uint32(58).fork()).join();
    }
    if (message.chat !== undefined) {
      ChatModel.encode(message.chat, writer.uint32(66).fork()).join();
    }
    for (const v of message.relatedNotes) {
      writer.uint32(74).string(v!);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(82).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(90).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HabitModel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHabitModel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.icon = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.color = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.records.push(HabitRecord.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.goal = Goal.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.chat = ChatModel.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.relatedNotes.push(reader.string());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<HabitModel>, I>>(base?: I): HabitModel {
    return HabitModel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HabitModel>, I>>(object: I): HabitModel {
    const message = createBaseHabitModel();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.icon = object.icon ?? "";
    message.color = object.color ?? "";
    message.status = object.status ?? 0;
    message.records = object.records?.map((e) => HabitRecord.fromPartial(e)) || [];
    message.goal = (object.goal !== undefined && object.goal !== null) ? Goal.fromPartial(object.goal) : undefined;
    message.chat = (object.chat !== undefined && object.chat !== null) ? ChatModel.fromPartial(object.chat) : undefined;
    message.relatedNotes = object.relatedNotes?.map((e) => e) || [];
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBaseHabitRecord(): HabitRecord {
  return { date: "", startAt: undefined, msg: "" };
}

export const HabitRecord: MessageFns<HabitRecord> = {
  encode(message: HabitRecord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.date !== "") {
      writer.uint32(10).string(message.date);
    }
    if (message.startAt !== undefined) {
      Timestamp.encode(toTimestamp(message.startAt), writer.uint32(18).fork()).join();
    }
    if (message.msg !== "") {
      writer.uint32(26).string(message.msg);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HabitRecord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHabitRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.date = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.startAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.msg = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<HabitRecord>, I>>(base?: I): HabitRecord {
    return HabitRecord.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HabitRecord>, I>>(object: I): HabitRecord {
    const message = createBaseHabitRecord();
    message.date = object.date ?? "";
    message.startAt = object.startAt ?? undefined;
    message.msg = object.msg ?? "";
    return message;
  },
};

function createBaseGoal(): Goal {
  return { daysPerWeek: 0, startAt: 0 };
}

export const Goal: MessageFns<Goal> = {
  encode(message: Goal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.daysPerWeek !== 0) {
      writer.uint32(8).uint32(message.daysPerWeek);
    }
    if (message.startAt !== 0) {
      writer.uint32(16).uint32(message.startAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Goal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGoal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.daysPerWeek = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.startAt = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<Goal>, I>>(base?: I): Goal {
    return Goal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Goal>, I>>(object: I): Goal {
    const message = createBaseGoal();
    message.daysPerWeek = object.daysPerWeek ?? 0;
    message.startAt = object.startAt ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
