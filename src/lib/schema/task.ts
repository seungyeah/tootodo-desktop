// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: task.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ChatModel } from "./chat";
import { Duration } from "./google/protobuf/duration";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "task";

export enum TaskStatus {
  ONGOING = 0,
  COMPLETED = 1,
  PENDING = 2,
  UNRECOGNIZED = -1,
}

export interface TaskModel {
  id: string;
  title: string;
  status: TaskStatus;
  progressRate: number;
  plans: WorkPlan[];
  subtasks: SubtaskModel[];
  criticalPath: CriticalPathInfo | undefined;
  workDays: WorkDay[];
  totalTime: number;
  chat: ChatModel | undefined;
  relatedNotes: string[];
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

export interface SubtaskModel {
  id: string;
  title: string;
  date: string;
  time: string;
}

export interface WorkPlan {
  startDate: string;
  endDate: string;
}

export interface WorkDay {
  date: string;
  workingTime: Duration | undefined;
}

export interface CriticalPathInfo {
  id: string;
  name: string;
  color: string;
}

export interface CriticalPath {
  id: string;
  name: string;
  color: string;
  taskIds: string[];
}

function createBaseTaskModel(): TaskModel {
  return {
    id: "",
    title: "",
    status: 0,
    progressRate: 0,
    plans: [],
    subtasks: [],
    criticalPath: undefined,
    workDays: [],
    totalTime: 0,
    chat: undefined,
    relatedNotes: [],
    createdAt: undefined,
    updatedAt: undefined,
  };
}

export const TaskModel: MessageFns<TaskModel> = {
  encode(message: TaskModel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    if (message.progressRate !== 0) {
      writer.uint32(32).uint32(message.progressRate);
    }
    for (const v of message.plans) {
      WorkPlan.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.subtasks) {
      SubtaskModel.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.criticalPath !== undefined) {
      CriticalPathInfo.encode(message.criticalPath, writer.uint32(58).fork()).join();
    }
    for (const v of message.workDays) {
      WorkDay.encode(v!, writer.uint32(66).fork()).join();
    }
    if (message.totalTime !== 0) {
      writer.uint32(72).uint32(message.totalTime);
    }
    if (message.chat !== undefined) {
      ChatModel.encode(message.chat, writer.uint32(82).fork()).join();
    }
    for (const v of message.relatedNotes) {
      writer.uint32(90).string(v!);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(98).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskModel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskModel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.progressRate = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.plans.push(WorkPlan.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.subtasks.push(SubtaskModel.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.criticalPath = CriticalPathInfo.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.workDays.push(WorkDay.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.totalTime = reader.uint32();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.chat = ChatModel.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.relatedNotes.push(reader.string());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<TaskModel>, I>>(base?: I): TaskModel {
    return TaskModel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TaskModel>, I>>(object: I): TaskModel {
    const message = createBaseTaskModel();
    message.id = object.id ?? "";
    message.title = object.title ?? "";
    message.status = object.status ?? 0;
    message.progressRate = object.progressRate ?? 0;
    message.plans = object.plans?.map((e) => WorkPlan.fromPartial(e)) || [];
    message.subtasks = object.subtasks?.map((e) => SubtaskModel.fromPartial(e)) || [];
    message.criticalPath = (object.criticalPath !== undefined && object.criticalPath !== null)
      ? CriticalPathInfo.fromPartial(object.criticalPath)
      : undefined;
    message.workDays = object.workDays?.map((e) => WorkDay.fromPartial(e)) || [];
    message.totalTime = object.totalTime ?? 0;
    message.chat = (object.chat !== undefined && object.chat !== null) ? ChatModel.fromPartial(object.chat) : undefined;
    message.relatedNotes = object.relatedNotes?.map((e) => e) || [];
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBaseSubtaskModel(): SubtaskModel {
  return { id: "", title: "", date: "", time: "" };
}

export const SubtaskModel: MessageFns<SubtaskModel> = {
  encode(message: SubtaskModel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.date !== "") {
      writer.uint32(26).string(message.date);
    }
    if (message.time !== "") {
      writer.uint32(34).string(message.time);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubtaskModel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubtaskModel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.date = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.time = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<SubtaskModel>, I>>(base?: I): SubtaskModel {
    return SubtaskModel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubtaskModel>, I>>(object: I): SubtaskModel {
    const message = createBaseSubtaskModel();
    message.id = object.id ?? "";
    message.title = object.title ?? "";
    message.date = object.date ?? "";
    message.time = object.time ?? "";
    return message;
  },
};

function createBaseWorkPlan(): WorkPlan {
  return { startDate: "", endDate: "" };
}

export const WorkPlan: MessageFns<WorkPlan> = {
  encode(message: WorkPlan, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startDate !== "") {
      writer.uint32(10).string(message.startDate);
    }
    if (message.endDate !== "") {
      writer.uint32(18).string(message.endDate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkPlan {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkPlan();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.startDate = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.endDate = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<WorkPlan>, I>>(base?: I): WorkPlan {
    return WorkPlan.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WorkPlan>, I>>(object: I): WorkPlan {
    const message = createBaseWorkPlan();
    message.startDate = object.startDate ?? "";
    message.endDate = object.endDate ?? "";
    return message;
  },
};

function createBaseWorkDay(): WorkDay {
  return { date: "", workingTime: undefined };
}

export const WorkDay: MessageFns<WorkDay> = {
  encode(message: WorkDay, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.date !== "") {
      writer.uint32(10).string(message.date);
    }
    if (message.workingTime !== undefined) {
      Duration.encode(message.workingTime, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkDay {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkDay();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.date = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.workingTime = Duration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<WorkDay>, I>>(base?: I): WorkDay {
    return WorkDay.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WorkDay>, I>>(object: I): WorkDay {
    const message = createBaseWorkDay();
    message.date = object.date ?? "";
    message.workingTime = (object.workingTime !== undefined && object.workingTime !== null)
      ? Duration.fromPartial(object.workingTime)
      : undefined;
    return message;
  },
};

function createBaseCriticalPathInfo(): CriticalPathInfo {
  return { id: "", name: "", color: "" };
}

export const CriticalPathInfo: MessageFns<CriticalPathInfo> = {
  encode(message: CriticalPathInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.color !== "") {
      writer.uint32(26).string(message.color);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CriticalPathInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCriticalPathInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.color = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<CriticalPathInfo>, I>>(base?: I): CriticalPathInfo {
    return CriticalPathInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CriticalPathInfo>, I>>(object: I): CriticalPathInfo {
    const message = createBaseCriticalPathInfo();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.color = object.color ?? "";
    return message;
  },
};

function createBaseCriticalPath(): CriticalPath {
  return { id: "", name: "", color: "", taskIds: [] };
}

export const CriticalPath: MessageFns<CriticalPath> = {
  encode(message: CriticalPath, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.color !== "") {
      writer.uint32(26).string(message.color);
    }
    for (const v of message.taskIds) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CriticalPath {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCriticalPath();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.color = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.taskIds.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<CriticalPath>, I>>(base?: I): CriticalPath {
    return CriticalPath.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CriticalPath>, I>>(object: I): CriticalPath {
    const message = createBaseCriticalPath();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.color = object.color ?? "";
    message.taskIds = object.taskIds?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
