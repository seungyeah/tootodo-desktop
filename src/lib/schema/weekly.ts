// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: weekly.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "./google/protobuf/duration";
import { Timestamp } from "./google/protobuf/timestamp";
import { Goal } from "./habit";
import { SubtaskModel } from "./task";

export const protobufPackage = "weekly";

export enum DailyMsgType {
  TEXT = 0,
  QUESTION = 1,
  TIMER = 2,
  SUMMARY = 3,
  UNRECOGNIZED = -1,
}

export enum Week {
  UNKNOWN = 0,
  MON = 1,
  TUE = 2,
  WED = 3,
  THU = 4,
  FRI = 5,
  SAT = 6,
  SUN = 7,
  UNRECOGNIZED = -1,
}

export interface WeeklyModel {
  year: number;
  week: number;
  tasks: ScheduledTask[];
  habits: OngoingHabit[];
  records: DailyRecord[];
}

export interface ScheduledTask {
  id: string;
  name: string;
  criticalPathColor: string;
  subtasks: SubtaskModel[];
  pinned: boolean;
}

export interface OngoingHabit {
  id: string;
  icon: string;
  color: string;
  goal: Goal | undefined;
}

export interface DailyRecord {
  weekday: Week;
  summary: string;
  msgs: DailyMsg[];
  timerRecords: TimerRecord[];
}

export interface DailyMsg {
  msgType: DailyMsgType;
  relatedTask: string;
  relatedHabit: string;
  content: string;
}

export interface TimerRecord {
  id: string;
  cycles: TimerCycle[];
  totalFocusTime: Duration | undefined;
  totalTime: Duration | undefined;
}

export interface TimerCycle {
  startAt: Date | undefined;
  endAt: Date | undefined;
  focusRate: number;
}

function createBaseWeeklyModel(): WeeklyModel {
  return { year: 0, week: 0, tasks: [], habits: [], records: [] };
}

export const WeeklyModel: MessageFns<WeeklyModel> = {
  encode(message: WeeklyModel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.year !== 0) {
      writer.uint32(8).uint32(message.year);
    }
    if (message.week !== 0) {
      writer.uint32(16).uint32(message.week);
    }
    for (const v of message.tasks) {
      ScheduledTask.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.habits) {
      OngoingHabit.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.records) {
      DailyRecord.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WeeklyModel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWeeklyModel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.year = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.week = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tasks.push(ScheduledTask.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.habits.push(OngoingHabit.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.records.push(DailyRecord.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<WeeklyModel>, I>>(base?: I): WeeklyModel {
    return WeeklyModel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WeeklyModel>, I>>(object: I): WeeklyModel {
    const message = createBaseWeeklyModel();
    message.year = object.year ?? 0;
    message.week = object.week ?? 0;
    message.tasks = object.tasks?.map((e) => ScheduledTask.fromPartial(e)) || [];
    message.habits = object.habits?.map((e) => OngoingHabit.fromPartial(e)) || [];
    message.records = object.records?.map((e) => DailyRecord.fromPartial(e)) || [];
    return message;
  },
};

function createBaseScheduledTask(): ScheduledTask {
  return { id: "", name: "", criticalPathColor: "", subtasks: [], pinned: false };
}

export const ScheduledTask: MessageFns<ScheduledTask> = {
  encode(message: ScheduledTask, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.criticalPathColor !== "") {
      writer.uint32(26).string(message.criticalPathColor);
    }
    for (const v of message.subtasks) {
      SubtaskModel.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.pinned !== false) {
      writer.uint32(40).bool(message.pinned);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScheduledTask {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScheduledTask();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.criticalPathColor = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.subtasks.push(SubtaskModel.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.pinned = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<ScheduledTask>, I>>(base?: I): ScheduledTask {
    return ScheduledTask.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ScheduledTask>, I>>(object: I): ScheduledTask {
    const message = createBaseScheduledTask();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.criticalPathColor = object.criticalPathColor ?? "";
    message.subtasks = object.subtasks?.map((e) => SubtaskModel.fromPartial(e)) || [];
    message.pinned = object.pinned ?? false;
    return message;
  },
};

function createBaseOngoingHabit(): OngoingHabit {
  return { id: "", icon: "", color: "", goal: undefined };
}

export const OngoingHabit: MessageFns<OngoingHabit> = {
  encode(message: OngoingHabit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.icon !== "") {
      writer.uint32(18).string(message.icon);
    }
    if (message.color !== "") {
      writer.uint32(26).string(message.color);
    }
    if (message.goal !== undefined) {
      Goal.encode(message.goal, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OngoingHabit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOngoingHabit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.icon = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.color = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.goal = Goal.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<OngoingHabit>, I>>(base?: I): OngoingHabit {
    return OngoingHabit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OngoingHabit>, I>>(object: I): OngoingHabit {
    const message = createBaseOngoingHabit();
    message.id = object.id ?? "";
    message.icon = object.icon ?? "";
    message.color = object.color ?? "";
    message.goal = (object.goal !== undefined && object.goal !== null) ? Goal.fromPartial(object.goal) : undefined;
    return message;
  },
};

function createBaseDailyRecord(): DailyRecord {
  return { weekday: 0, summary: "", msgs: [], timerRecords: [] };
}

export const DailyRecord: MessageFns<DailyRecord> = {
  encode(message: DailyRecord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.weekday !== 0) {
      writer.uint32(8).int32(message.weekday);
    }
    if (message.summary !== "") {
      writer.uint32(18).string(message.summary);
    }
    for (const v of message.msgs) {
      DailyMsg.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.timerRecords) {
      TimerRecord.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DailyRecord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDailyRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.weekday = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.summary = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.msgs.push(DailyMsg.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.timerRecords.push(TimerRecord.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<DailyRecord>, I>>(base?: I): DailyRecord {
    return DailyRecord.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DailyRecord>, I>>(object: I): DailyRecord {
    const message = createBaseDailyRecord();
    message.weekday = object.weekday ?? 0;
    message.summary = object.summary ?? "";
    message.msgs = object.msgs?.map((e) => DailyMsg.fromPartial(e)) || [];
    message.timerRecords = object.timerRecords?.map((e) => TimerRecord.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDailyMsg(): DailyMsg {
  return { msgType: 0, relatedTask: "", relatedHabit: "", content: "" };
}

export const DailyMsg: MessageFns<DailyMsg> = {
  encode(message: DailyMsg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.msgType !== 0) {
      writer.uint32(8).int32(message.msgType);
    }
    if (message.relatedTask !== "") {
      writer.uint32(18).string(message.relatedTask);
    }
    if (message.relatedHabit !== "") {
      writer.uint32(26).string(message.relatedHabit);
    }
    if (message.content !== "") {
      writer.uint32(34).string(message.content);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DailyMsg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDailyMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.msgType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.relatedTask = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.relatedHabit = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.content = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<DailyMsg>, I>>(base?: I): DailyMsg {
    return DailyMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DailyMsg>, I>>(object: I): DailyMsg {
    const message = createBaseDailyMsg();
    message.msgType = object.msgType ?? 0;
    message.relatedTask = object.relatedTask ?? "";
    message.relatedHabit = object.relatedHabit ?? "";
    message.content = object.content ?? "";
    return message;
  },
};

function createBaseTimerRecord(): TimerRecord {
  return { id: "", cycles: [], totalFocusTime: undefined, totalTime: undefined };
}

export const TimerRecord: MessageFns<TimerRecord> = {
  encode(message: TimerRecord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    for (const v of message.cycles) {
      TimerCycle.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.totalFocusTime !== undefined) {
      Duration.encode(message.totalFocusTime, writer.uint32(26).fork()).join();
    }
    if (message.totalTime !== undefined) {
      Duration.encode(message.totalTime, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TimerRecord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimerRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.cycles.push(TimerCycle.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.totalFocusTime = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.totalTime = Duration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<TimerRecord>, I>>(base?: I): TimerRecord {
    return TimerRecord.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TimerRecord>, I>>(object: I): TimerRecord {
    const message = createBaseTimerRecord();
    message.id = object.id ?? "";
    message.cycles = object.cycles?.map((e) => TimerCycle.fromPartial(e)) || [];
    message.totalFocusTime = (object.totalFocusTime !== undefined && object.totalFocusTime !== null)
      ? Duration.fromPartial(object.totalFocusTime)
      : undefined;
    message.totalTime = (object.totalTime !== undefined && object.totalTime !== null)
      ? Duration.fromPartial(object.totalTime)
      : undefined;
    return message;
  },
};

function createBaseTimerCycle(): TimerCycle {
  return { startAt: undefined, endAt: undefined, focusRate: 0 };
}

export const TimerCycle: MessageFns<TimerCycle> = {
  encode(message: TimerCycle, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startAt !== undefined) {
      Timestamp.encode(toTimestamp(message.startAt), writer.uint32(10).fork()).join();
    }
    if (message.endAt !== undefined) {
      Timestamp.encode(toTimestamp(message.endAt), writer.uint32(18).fork()).join();
    }
    if (message.focusRate !== 0) {
      writer.uint32(24).uint32(message.focusRate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TimerCycle {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimerCycle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.startAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.endAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.focusRate = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<TimerCycle>, I>>(base?: I): TimerCycle {
    return TimerCycle.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TimerCycle>, I>>(object: I): TimerCycle {
    const message = createBaseTimerCycle();
    message.startAt = object.startAt ?? undefined;
    message.endAt = object.endAt ?? undefined;
    message.focusRate = object.focusRate ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
